// src/components/WorkflowSummary.jsx
import React, { useState } from 'react';

const WorkflowSummary = ({ workflow, activities, stages }) => {
  const [selectedTab, setSelectedTab] = useState('summary');
  
  if (!workflow) return null;
  
  const renderSummaryTab = () => (
    <div>
      <div className="mb-4">
        <h3 className="font-semibold text-gray-700 mb-2">Workflow Information</h3>
        <div className="bg-white rounded border border-gray-200 overflow-hidden">
          <div className="px-4 py-2 bg-gray-50 border-b border-gray-200">
            <span className="text-sm font-medium text-gray-500">Name</span>
          </div>
          <div className="px-4 py-2">
            <span className="text-sm text-gray-900">{workflow.name}</span>
          </div>
          
          <div className="px-4 py-2 bg-gray-50 border-t border-b border-gray-200">
            <span className="text-sm font-medium text-gray-500">Table</span>
          </div>
          <div className="px-4 py-2">
            <span className="text-sm text-gray-900">{workflow.table}</span>
          </div>
          
          <div className="px-4 py-2 bg-gray-50 border-t border-b border-gray-200">
            <span className="text-sm font-medium text-gray-500">Status</span>
          </div>
          <div className="px-4 py-2">
            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${workflow.active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>
              {workflow.active ? 'Active' : 'Inactive'}
            </span>
          </div>
          
          {workflow.description && (
            <>
              <div className="px-4 py-2 bg-gray-50 border-t border-b border-gray-200">
                <span className="text-sm font-medium text-gray-500">Description</span>
              </div>
              <div className="px-4 py-2">
                <span className="text-sm text-gray-900">{workflow.description}</span>
              </div>
            </>
          )}
        </div>
      </div>
      
      <div className="mb-4">
        <h3 className="font-semibold text-gray-700 mb-2">Statistics</h3>
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-white p-4 rounded border border-gray-200">
            <div className="text-2xl font-bold text-snow-primary">
              {Object.keys(activities).length}
            </div>
            <div className="text-sm text-gray-500">Activities</div>
          </div>
          <div className="bg-white p-4 rounded border border-gray-200">
            <div className="text-2xl font-bold text-snow-dark">
              {Object.keys(stages).length}
            </div>
            <div className="text-sm text-gray-500">Stages</div>
          </div>
        </div>
      </div>
    </div>
  );
  
  const renderActivitiesTab = () => (
    <div>
      <h3 className="font-semibold text-gray-700 mb-2">Activities</h3>
      <div className="bg-white rounded border border-gray-200 overflow-hidden">
        {Object.values(activities).map((activity) => (
          <div key={activity.id} className="px-4 py-2 border-b border-gray-200 last:border-b-0">
            <div className="font-medium text-gray-900">{activity.name}</div>
            <div className="text-xs text-gray-500">{activity.activityDefinition}</div>
          </div>
        ))}
      </div>
    </div>
  );
  
  const renderStagesTab = () => (
    <div>
      <h3 className="font-semibold text-gray-700 mb-2">Stages</h3>
      <div className="bg-white rounded border border-gray-200 overflow-hidden">
        {Object.values(stages).map((stage) => (
          <div key={stage.id} className="px-4 py-2 border-b border-gray-200 last:border-b-0">
            <div className="font-medium text-gray-900">{stage.name}</div>
            <div className="text-xs text-gray-500">Order: {stage.order}</div>
          </div>
        ))}
      </div>
    </div>
  );
  
  return (
    <div className="mt-4">
      <h2 className="text-lg font-semibold text-snow-dark mb-4">Workflow Details</h2>
      
      <div className="mb-4">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex">
            <button
              onClick={() => setSelectedTab('summary')}
              className={`py-2 px-4 text-sm font-medium ${
                selectedTab === 'summary'
                  ? 'border-b-2 border-snow-primary text-snow-primary'
                  : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Summary
            </button>
            <button
              onClick={() => setSelectedTab('activities')}
              className={`py-2 px-4 text-sm font-medium ${
                selectedTab === 'activities'
                  ? 'border-b-2 border-snow-primary text-snow-primary'
                  : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Activities
            </button>
            <button
              onClick={() => setSelectedTab('stages')}
              className={`py-2 px-4 text-sm font-medium ${
                selectedTab === 'stages'
                  ? 'border-b-2 border-snow-primary text-snow-primary'
                  : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Stages
            </button>
          </nav>
        </div>
      </div>
      
      {selectedTab === 'summary' && renderSummaryTab()}
      {selectedTab === 'activities' && renderActivitiesTab()}
      {selectedTab === 'stages' && renderStagesTab()}
    </div>
  );
};

export default WorkflowSummary;

// src/components/ActivityDetails.jsx
import React from 'react';

const ActivityDetails = ({ activity, workflowData, onClose }) => {
  if (!activity || !workflowData) return null;
  
  const { activities, transitions, conditions } = workflowData;
  
  // Get transitions from this activity
  const getOutgoingTransitions = () => {
    if (!transitions[activity.id]) return [];
    
    return transitions[activity.id].map(transition => {
      const toActivity = activities[transition.toActivityId];
      const condition = conditions[transition.conditionId];
      
      return {
        id: transition.id,
        toActivity,
        condition
      };
    });
  };
  
  // Get transitions to this activity
  const getIncomingTransitions = () => {
    const incoming = [];
    
    Object.entries(transitions).forEach(([fromId, transitionList]) => {
      transitionList.forEach(transition => {
        if (transition.toActivityId === activity.id) {
          const fromActivity = activities[transition.fromActivityId];
          const condition = conditions[transition.conditionId];
          
          incoming.push({
            id: transition.id,
            fromActivity,
            condition
          });
        }
      });
    });
    
    return incoming;
  };
  
  const outgoingTransitions = getOutgoingTransitions();
  const incomingTransitions = getIncomingTransitions();
  
  return (
    <div className="h-full overflow-y-auto p-4">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-semibold text-snow-dark">Activity Details</h2>
        <button 
          onClick={onClose}
          className="text-gray-400 hover:text-gray-500"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
          </svg>
        </button>
      </div>
      
      <div className="bg-snow-secondary rounded-lg p-4 mb-4">
        <div className="text-xl font-medium text-snow-dark mb-1">{activity.name}</div>
        <div className="text-sm text-gray-600 mb-2">{activity.activityDefinition || 'No activity definition'}</div>
        
        <div className="grid grid-cols-2 gap-2 text-xs">
          <div className="text-gray-500">Position:</div>
          <div>X: {activity.x}, Y: {activity.y}</div>
          
          <div className="text-gray-500">ID:</div>
          <div className="truncate">{activity.id}</div>
        </div>
      </div>
      
      {incomingTransitions.length > 0 && (
        <div className="mb-4">
          <h3 className="font-semibold text-gray-700 mb-2">Incoming Transitions</h3>
          <div className="bg-white rounded border border-gray-200">
            {incomingTransitions.map(({ id, fromActivity, condition }) => (
              <div key={id} className="px-4 py-2 border-b border-gray-200 last:border-b-0">
                <div className="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-snow-primary mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm.707-10.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L9.414 11H13a1 1 0 100-2H9.414l1.293-1.293z" clipRule="evenodd" />
                  </svg>
                  <span className="font-medium text-gray-900">
                    From: {fromActivity ? fromActivity.name : 'Unknown'}
                  </span>
                </div>
                {condition && (
                  <div className="ml-5 text-xs text-gray-500">
                    Condition: {condition.name} ({condition.condition})
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
      
      {outgoingTransitions.length > 0 && (
        <div className="mb-4">
          <h3 className="font-semibold text-gray-700 mb-2">Outgoing Transitions</h3>
          <div className="bg-white rounded border border-gray-200">
            {outgoingTransitions.map(({ id, toActivity, condition }) => (
              <div key={id} className="px-4 py-2 border-b border-gray-200 last:border-b-0">
                <div className="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-snow-accent mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z" clipRule="evenodd" />
                  </svg>
                  <span className="font-medium text-gray-900">
                    To: {toActivity ? toActivity.name : 'Unknown'}
                  </span>
                </div>
                {condition && (
                  <div className="ml-5 text-xs text-gray-500">
                    Condition: {condition.name} ({condition.condition})
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ActivityDetails;
